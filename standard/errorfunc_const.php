<?php
/**
 * PHPStorm stub file for Error Handling and Logging constants.
 *
 * @link http://php.net/manual/en/book.curl.php
 */

/**
 * Whether or not to omit the "args" index, and thus all the function/method arguments, to save memory.
 *
 * @link http://php.net/manual/en/function.debug-backtrace.php
 */
const DEBUG_BACKTRACE_IGNORE_ARGS = 2;
/**
 * Whether or not to populate the "object" index.
 *
 * @link http://php.net/manual/en/function.debug-backtrace.php
 */
const DEBUG_BACKTRACE_PROVIDE_OBJECT = 1;
/**
 * All errors and warnings, as supported, except of level
 * <b>E_STRICT</b> prior to PHP 5.4.0.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_ALL = 30719;
/**
 * Fatal compile-time errors. This is like an <b>E_ERROR</b>,
 * except it is generated by the Zend Scripting Engine.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_COMPILE_ERROR = 64;
/**
 * Compile-time warnings (non-fatal errors). This is like an
 * <b>E_WARNING</b>, except it is generated by the Zend
 * Scripting Engine.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_COMPILE_WARNING = 128;
/**
 * Fatal errors that occur during PHP's initial startup. This is like an
 * <b>E_ERROR</b>, except it is generated by the core of PHP.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_CORE_ERROR = 16;
/**
 * Warnings (non-fatal errors) that occur during PHP's initial startup.
 * This is like an <b>E_WARNING</b>, except it is generated
 * by the core of PHP.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_CORE_WARNING = 32;
/**
 * Run-time notices. Enable this to receive warnings about code
 * that will not work in future versions.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_DEPRECATED = 8192;
/**
 * Fatal run-time errors. These indicate errors that can not be
 * recovered from, such as a memory allocation problem.
 * Execution of the script is halted.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_ERROR = 1;
/**
 * Run-time notices. Indicate that the script encountered something that
 * could indicate an error, but could also happen in the normal course of
 * running a script.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_NOTICE = 8;
/**
 * Compile-time parse errors. Parse errors should only be generated by
 * the parser.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_PARSE = 4;
/**
 * Catchable fatal error. It indicates that a probably dangerous error
 * occured, but did not leave the Engine in an unstable state. If the error
 * is not caught by a user defined handle (see also
 * <b>set_error_handler</b>), the application aborts as it
 * was an <b>E_ERROR</b>.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_RECOVERABLE_ERROR = 4096;
/**
 * Enable to have PHP suggest changes
 * to your code which will ensure the best interoperability
 * and forward compatibility of your code.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_STRICT = 2048;
/**
 * User-generated warning message. This is like an
 * <b>E_DEPRECATED</b>, except it is generated in PHP code by
 * using the PHP function <b>trigger_error</b>.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_USER_DEPRECATED = 16384;
/**
 * User-generated error message. This is like an
 * <b>E_ERROR</b>, except it is generated in PHP code by
 * using the PHP function <b>trigger_error</b>.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_USER_ERROR = 256;
/**
 * User-generated notice message. This is like an
 * <b>E_NOTICE</b>, except it is generated in PHP code by
 * using the PHP function <b>trigger_error</b>.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_USER_NOTICE = 1024;
/**
 * User-generated warning message. This is like an
 * <b>E_WARNING</b>, except it is generated in PHP code by
 * using the PHP function <b>trigger_error</b>.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_USER_WARNING = 512;
/**
 * Run-time warnings (non-fatal errors). Execution of the script is not
 * halted.
 *
 * @link http://php.net/manual/en/errorfunc.constants.php
 */
const E_WARNING = 2;
