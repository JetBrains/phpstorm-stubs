<?php
/**
 * https://secure.php.net/manual/en/book.seaslog.php
 * The Seaslog is an effective,fast,stable log extension for PHP.
 * SeasLog requires PHP 5.2.0 or greater. Earlier versions may not work.
 */


/**
 * https://secure.php.net/manual/en/seaslog.constants.php
 * The constants below are defined by this extension,
 * and will only be available when the extension has either
 * been compiled into PHP or dynamically loaded at runtime.
 */

define('SEASLOG_ALL', 'ALL');
define('SEASLOG_DEBUG', 'DEBUG');
define('SEASLOG_INFO', 'INFO');
define('SEASLOG_NOTICE', 'NOTICE');
define('SEASLOG_WARNING', 'WARNING');
define('SEASLOG_ERROR', 'ERROR');
define('SEASLOG_CRITICAL', 'CRITICAL');
define('SEASLOG_ALERT', 'ALERT');
define('SEASLOG_EMERGENCY', 'EMERGENCY');
define('SEASLOG_DETAIL_ORDER_ASC', 1);
define('SEASLOG_DETAIL_ORDER_DESC', 2);
define('SEASLOG_CLOSE_LOGGER_STREAM_MOD_ALL', 1);
define('SEASLOG_CLOSE_LOGGER_STREAM_MOD_ASSIGN', 2);
define('SEASLOG_REQUEST_VARIABLE_DOMAIN_PORT', 1);
define('SEASLOG_REQUEST_VARIABLE_REQUEST_URI', 2);
define('SEASLOG_REQUEST_VARIABLE_REQUEST_METHOD', 3);
define('SEASLOG_REQUEST_VARIABLE_CLIENT_IP', 4);

class SeasLog
{

    /**
     * SeasLog constructor.
     */
    public function __construct()
    {
    }

    /**
     * SeasLog destruct.
     */
    public function __destruct()
    {
    }

    /**
     * Set SeasLog base path.
     * @param string $basePath
     *
     * @return bool
     */
    public static function setBasePath($basePath)
    {
        return true;
    }

    /**
     * Get easLog base path.
     *
     * @return string
     */
    public static function getBasePath()
    {
    }

    /**
     * Set SeasLog request_id differentiated requests
     *
     * @param string $request_id
     *
     * @return bool
     */
    public static function setRequestID($request_id)
    {
        return true;
    }

    /**
     * Get SeasLog request_id differentiated requests
     * @return  string generated by the
     * built-in `static char *get_uniqid ()` function, or
     * setted by SeasLog::setRequestId() function.
     */
    public static function getRequestID()
    {
        return '';
    }

    /**
     * Set SeasLog logger name
     *
     * @param string $logger Logger name.
     *
     * @return bool Return TRUE on created logger disectory success, FALSE on failure.
     */
    public static function setLogger($logger)
    {
        return true;
    }

    /**
     * Manually release stream flow from logger
     *
     * @param int    $model  Constant int.
     * @param string $logger The logger name.
     *
     * @return bool
     */
    public static function closeLoggerStream($model = SEASLOG_CLOSE_LOGGER_STREAM_MOD_ALL, $logger)
    {
        return true;
    }

    /**
     *  Get SeasLog last logger path
     * @return string Use the Function SeasLog::setLogger() will
     * change the value of function SeasLog::getLastLogger().
     */
    public static function getLastLogger()
    {
        return '';
    }

    /**
     * Set SeasLog datetime format style
     * @param string $format String. Such as `Y-m-d H:i:s` or `Ymd His`.
     * See also first param `format` at date().
     *
     * @return bool Return TRUE on setted datetime format success, FALSE on failure.
     */
    public static function setDatetimeFormat($format)
    {
        return true;
    }

    /**
     * Get SeasLog datetime format style
     * @return string Get SeasLog datetime format style of seaslog.default_datetime_format.
     * Use the Function SeasLog::setDatetimeFormat() will change this value.
     */
    public static function getDatetimeFormat()
    {
        return '';
    }

    /**
     * Manually set SeasLog request variable
     *
     * @param int $key Constant int.
     * @param string $value The request variable value.
     *
     * @return bool
     */
    public static function setRequestVariable($key, $value)
    {
        return true;
    }

    /**
     * Get SeasLog request variable
     *
     * @param int $key
     *
     * @return string Return request variable value on set success.
     */
    public static function getRequestVariable($key)
    {
        return '';
    }

    /**
     * Get log count by level, log_path and key_word
     * `SeasLog` get count value of `grep -ai '{level}' | grep -aic '{key_word}'`
     * use system pipe and return to PHP (array or int).
     *
     * @param string $level  The log information level.
     * @param string $log_path The log information path.
     * @param null   $key_word The search key word for log information.
     *
     * @return mixed
     */
    public static function analyzerCount($level = 'all', $log_path = '*', $key_word = null)
    {
        return [];
    }

    /**
     * Get log detail by level, log_path, key_word, start, limit, order
     *
     * @param string $level
     * @param string $log_path
     * @param null   $key_word
     * @param int    $start
     * @param int    $limit
     * @param int    $order
     *
     * @return  mixed
     */
    public static function analyzerDetail($level = SEASLOG_INFO, $log_path = '*', $key_word = null, $start = 1, $limit = 20, $order = SEASLOG_DETAIL_ORDER_ASC)
    {
        return [];
    }

    /**
     * Get the logs buffer in memory as array
     *
     * @return array Return an array from logs buffer in memory.
     */
    public static function getBuffer()
    {
        return [];
    }

    /**
     * Flush logs buffer, dump to appender file, or send to remote api with tcp/udp
     *
     * @return bool
     */
    public static function flushBuffer()
    {
        return true;
    }

    /**
     * Record debug log information
     *
     * @param string|array $message The log message.
     * @param array        $context The `message` contain placeholders which implementors
     *                      replace with values from content array.
     *                      Sush as `message` is `log info from {NAME}` and `content`
     *                      is `array('NAME' => neeke)`, the log information will
     *                      `log info from neeke`.
     *
     * @param string       $logger The `logger` cased by the third param would be used right
     *                     this right now, like a temp logger, when the
     *                      function SeasLog::setLogger() called in pre content.
     *                      If `logger` NULL or "", SeasLog will use lastest
     *                     logger setted by SeasLog::setLogger().
     *
     * @return bool
     */
    public static function debug($message, array $context = [], $logger = '')
    {
        return true;
    }

    /**
     * Record info log information
     *
     * @param string|array $message
     * @param array        $context
     * @param string       $logger
     *
     * @return bool
     */
    public static function info($message, array $context = [], $logger = '')
    {
        return true;
    }

    /**
     * Record notice log information
     *
     * @param string|array $message
     * @param array        $context
     * @param string       $logger
     *
     * @return bool
     */
    public static function notice($message, array $context = [], $logger = '')
    {
        return true;
    }

    /**
     *  Record warning log information
     *
     * @param string|array $message
     * @param array        $context
     * @param string       $logger
     *
     * @return bool
     */
    public static function warning($message, array $context = [], $logger = '')
    {
        return true;
    }

    /**
     * Record error log information
     *
     * @param string|array $message
     * @param array        $context
     * @param string       $logger
     *
     * @return bool
     */
    public static function error($message, array $context = [], $logger = '')
    {
        return true;
    }

    /**
     * Record critical log information
     *
     * @param string|array $message
     * @param array        $context
     * @param string       $logger
     *
     * @return bool
     */
    public static function critical($message, array $context = [], $logger = '')
    {
        return true;
    }

    /**
     * Record critical log information
     *
     * @param string|array $message
     * @param array        $context
     * @param string       $logger
     *
     * @return bool
     */
    public static function alert($message, array $context = [], $logger = '')
    {
        return true;
    }

    /**
     * Record emergency log information
     *
     * @param string|array $message
     * @param array        $context
     * @param string       $logger
     *
     * @return bool
     */
    public static function emergency($message, array $context = [], $logger = '')
    {
        return true;
    }

    /**
     * The Common Record Log Function
     *
     * @param  string       $level
     * @param string|array $message The log message.
     * @param array        $context
     * @param string       $logger
     *
     * @return bool
     */
    public static function log($level, $message, array $context = [], $logger = '')
    {
        return true;
    }
}
